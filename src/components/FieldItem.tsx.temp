import * as React from "react";
import { CSSAttrs } from "../utils/types";
import cm from './FieldItem.scss';
import Tools from "../utils/Tools";
import Field from "./Field";
import { FieldProps } from "./FieldType";
import * as ReactDOM from "react-dom";

const tools = Tools.getInstance();
export interface FieldItemProps extends CSSAttrs {
    label?: React.ReactNode;
    layout?: 'vertical' | 'horizontal';
}
export default class FieldItem extends React.PureComponent<FieldItemProps, any> {
    static isFieldItem(fieldItem: any) {
        return (fieldItem as React.ReactElement<FieldItemProps>).type === FieldItem;
    }
    widgetInstance: React.ReactInstance;
    constructor(props: FieldItemProps) {
        super(props);

        this.handleLabelClick = this.handleLabelClick.bind(this);
    }
    render() {
        let { label, className, style, children } = this.props;

        return (
            <div style={style} className={
                tools.classNames(
                    cm.wrapper,
                    className
                )
            }>
                <label className={cm.label} onClick={this.handleLabelClick}>{label}</label>
                <div className={cm['field-control']}>
                    {
                        React.Children.map(children, (child: React.ReactNode) => {
                            return Field.isField(child) ? React.cloneElement(child as JSX.Element, {
                                }) : child
                        })
                    }
                </div>
            </div>
        );
    }
    private handleLabelClick(e: React.MouseEvent<HTMLLabelElement>) {
        e.preventDefault();

    }
}